-- cat stuff/migration.txt | ssh root@metronom.feinheit.ch 'sudo -u postgres psql workbench'
-- ssh deploy@metronom.feinheit.ch 'cd www/workbench && venv/bin/python -u manage.py spring_cleaner'

CREATE EXTENSION dblink;

TRUNCATE accounts_user RESTART IDENTITY CASCADE;
TRUNCATE contacts_group RESTART IDENTITY CASCADE;
TRUNCATE projects_project RESTART IDENTITY CASCADE;
TRUNCATE services_servicetype RESTART IDENTITY CASCADE;
TRUNCATE audit_logged_actions RESTART IDENTITY CASCADE;
TRUNCATE deals_stage RESTART IDENTITY CASCADE;
TRUNCATE invoices_recurringinvoice RESTART IDENTITY CASCADE;
TRUNCATE awt_year RESTART IDENTITY CASCADE;


SET application_name TO 'Import';


--
-- Service types
--

INSERT INTO services_servicetype
(id, title, hourly_rate, position)
VALUES
(1, 'Beratung', 200, 10),
(2, 'Konzept', 200, 20),
(3, 'Grafik', 160, 30),
(4, 'Multimedia & Film', 180, 40),
(5, 'Programmierung & IT', 180, 50),
(6, 'Projektorganisation', 130, 60),
(7, 'Administration', 100, 70);

INSERT INTO deals_stage
(id, title, position)
VALUES
(1, 'Sammelbecken', 10),
(2, 'Erstkontakt', 20),
(3, 'Auftragsschärfung', 30),
(4, 'unter 80% ', 40),
(5, '80% später', 50),
(6, '80% jetzt', 60);


--
-- User accounts
--

INSERT INTO accounts_user
(id, password, last_login, email, is_active, is_admin, _short_name, _full_name, enforce_same_week_logging)
SELECT id, '', NULL, email, is_active, is_superuser, username, concat(first_name, ' ', last_name), CASE WHEN id=140 THEN FALSE ELSE TRUE END FROM
dblink(
    'dbname=fineware_feinheit',
    'SELECT u.id, u.email, u.is_active, u.is_superuser, u.username, u.first_name, u.last_name, a.dob FROM auth_user u LEFT JOIN accounts_profile p ON p.user_id=u.id LEFT JOIN addressbook_person a ON p.person_id=a.id'
) AS p(id int, email varchar(255), is_active bool, is_superuser bool, username varchar(255), first_name varchar(100), last_name varchar(100), dob date);

--
-- Contact groups
--

INSERT INTO contacts_group
(id, title)
SELECT * FROM
dblink(
    'dbname=fineware_feinheit',
    'SELECT id, name FROM addressbook_group'
) AS p(id int, title varchar(100));

--
-- Organizations and their group membership
--

INSERT INTO contacts_organization
(id, name, primary_contact_id, notes)
SELECT id, name, primary_contact_id, '' FROM
dblink(
    'dbname=fineware_feinheit',
    'SELECT id, name, contact_id FROM addressbook_person WHERE company=TRUE'
) AS p(id int, name text, primary_contact_id int);

INSERT INTO contacts_organization_groups
(organization_id, group_id)
SELECT * FROM
dblink(
    'dbname=fineware_feinheit',
    'SELECT pg.person_id, pg.group_id FROM addressbook_person_groups pg LEFT JOIN addressbook_person p ON pg.person_id=p.id WHERE p.company=TRUE'
) AS p(organization_id int, group_id int);

--
-- Persons and their details
--

INSERT INTO contacts_person
(id, address, salutation, given_name, family_name, notes, organization_id, primary_contact_id, is_archived, address_on_first_name_terms)
SELECT id, CASE WHEN gender='f' THEN 'Frau' ELSE 'Herr' END, '', first_name, name, CASE WHEN title!='' THEN CONCAT('Titel: ', title, E'\n', notes) ELSE notes END, organization_id, primary_contact_id, is_archived, FALSE FROM
dblink(
    'dbname=fineware_feinheit',
    'SELECT id, gender, first_name, name, title, notes, NULL, contact_id, archived FROM addressbook_person WHERE company=FALSE'
) AS p(id int, gender varchar(10), first_name varchar(100), name text, title text, notes text, organization_id int, primary_contact_id int, is_archived bool);

UPDATE contacts_person p
SET salutation=CASE
WHEN m.gender='m' THEN CONCAT('Sehr geehrter Herr ', m.name)
WHEN m.gender='f' THEN CONCAT('Sehr geehrte Frau ', m.name)
ELSE CONCAT('Sehr geehrte/r ', m.first_name, ' ', m.name)
END
FROM
dblink(
  'dbname=fineware_feinheit',
  'SELECT id, first_name, name, gender FROM addressbook_person'
) AS m(
  id int, first_name text, name text, gender varchar(1)
)
WHERE p.id=m.id;

UPDATE contacts_person p
SET address_on_first_name_terms=TRUE, salutation=CASE
WHEN m.gender='m' THEN CONCAT('Lieber ', m.first_name)
WHEN m.gender='f' THEN CONCAT('Liebe ', m.first_name)
ELSE CONCAT('Hallo ', m.first_name)
END
FROM
dblink(
  'dbname=fineware_feinheit',
  'SELECT p.id, first_name, name, gender FROM addressbook_address a LEFT JOIN addressbook_person p ON a.person_id=p.id WHERE first_name_terms=TRUE'
) AS m(
  id int, first_name text, name text, gender varchar(1)
)
WHERE p.id=m.id;

INSERT INTO contacts_person_groups
(person_id, group_id)
SELECT * FROM
dblink(
    'dbname=fineware_feinheit',
    'SELECT pg.person_id, pg.group_id FROM addressbook_person_groups pg LEFT JOIN addressbook_person p ON pg.person_id=p.id WHERE p.company=FALSE'
) AS p(person_id int, group_id int);

INSERT INTO contacts_emailaddress
(person_id, type, email, weight)
SELECT person_id, type, email, 0 FROM
dblink(
    'dbname=fineware_feinheit',
    'SELECT e.person_id, type, email FROM addressbook_email e LEFT JOIN addressbook_person p ON e.person_id=p.id WHERE p.company=FALSE'
) AS p(person_id int, type varchar(20), email varchar(300));

INSERT INTO contacts_phonenumber
(person_id, type, phone_number, weight)
SELECT person_id, type, phone_number, 0 FROM
dblink(
    'dbname=fineware_feinheit',
    'SELECT e.person_id, type, number FROM addressbook_phonenumber e LEFT JOIN addressbook_person p ON e.person_id=p.id WHERE p.company=FALSE'
) AS p(person_id int, type varchar(20), phone_number varchar(300));

INSERT INTO contacts_postaladdress
(person_id, type, weight, street, house_number, address_suffix, postal_code, city, country, postal_address_override)
SELECT person_id, CASE WHEN type=1 THEN 'work' ELSE 'home' END, 0, p.address, '', substring(p.function for 100), p.zip_code, p.city, p.country, p.full_override
FROM
dblink(
    'dbname=fineware_feinheit',
    'SELECT p.id, a.type, e.name, p.first_name, p.name, a.function, a.address, a.zip_code, a.city, a.country, a.full_override FROM addressbook_address a LEFT JOIN addressbook_person p ON a.person_id=p.id LEFT OUTER JOIN addressbook_person e ON a.employer_id=e.id WHERE p.company=FALSE AND a.active=TRUE'
) AS p(person_id int, type int, employer_name varchar(300), first_name varchar(100), name varchar(300), function text, address text, zip_code varchar(20), city varchar(100), country varchar(100), full_override text);


-- UPDATE contacts_postaladdress SET postal_address=regexp_replace(postal_address, '^[\n\r]+', '', 'g');
-- UPDATE contacts_postaladdress SET postal_address=regexp_replace(postal_address, '^[\n\r]+', '', 'g');
-- UPDATE contacts_postaladdress SET postal_address=regexp_replace(postal_address, '^[\n\r]+', '', 'g');
-- UPDATE contacts_postaladdress SET postal_address=regexp_replace(postal_address, '[\n\r]$', '', 'g');
-- UPDATE contacts_postaladdress SET postal_address=regexp_replace(postal_address, '[\n\r]$', '', 'g');
-- UPDATE contacts_postaladdress SET postal_address=regexp_replace(postal_address, '[\n\r]$', '', 'g');
-- UPDATE contacts_postaladdress SET postal_address=regexp_replace(postal_address, '\n\n', E'\n', 'g');
-- UPDATE contacts_postaladdress SET postal_address=regexp_replace(postal_address, '\n\n', E'\n', 'g');
-- UPDATE contacts_postaladdress SET postal_address=regexp_replace(postal_address, '\n\n', E'\n', 'g');

--
-- Assign persons to organizations
--

UPDATE contacts_person
SET organization_id=employer_id FROM
dblink(
    'dbname=fineware_feinheit',
    'SELECT employer_id, person_id FROM addressbook_address WHERE employer_id IS NOT NULL AND active'
) AS p(employer_id int, person_id int)
WHERE contacts_person.id=p.person_id;


--
-- Distribute information from organizations to all employees
--

-- INSERT INTO contacts_postaladdress
-- (person_id, type, weight, street, house_number, address_suffix, postal_code, city, country, postal_address_override)
-- SELECT person.id, CONCAT('organization ', CASE WHEN type=1 THEN 'work' ELSE 'home' END), 0, p.address, '', p.function, p.zip_code, p.city, p.country, p.full_override
--  FROM
-- contacts_person person,
-- dblink(
--     'dbname=fineware_feinheit',
--     'SELECT a.person_id, a.type, a.full_override FROM addressbook_address a LEFT JOIN addressbook_person p ON a.person_id=p.id WHERE company=TRUE AND full_override!='''' AND active=TRUE'
-- ) AS p(employer_person_id int, type int, value text)
-- WHERE person.organization_id=employer_person_id;

INSERT INTO contacts_emailaddress
(person_id, type, email, weight)
SELECT person.id, CONCAT('organization ', type), value, 0 FROM
contacts_person person,
dblink(
    'dbname=fineware_feinheit',
    'SELECT a.person_id, a.type, a.email FROM addressbook_email a LEFT JOIN addressbook_person p ON a.person_id=p.id WHERE company=TRUE'
) AS p(employer_person_id int, type text, value text)
WHERE person.organization_id=employer_person_id;

INSERT INTO contacts_phonenumber
(person_id, type, phone_number, weight)
SELECT person.id, CONCAT('organization ', type), value, 0 FROM
contacts_person person,
dblink(
    'dbname=fineware_feinheit',
    'SELECT a.person_id, a.type, a.number FROM addressbook_phonenumber a LEFT JOIN addressbook_person p ON a.person_id=p.id WHERE company=TRUE'
) AS p(employer_person_id int, type text, value text)
WHERE person.organization_id=employer_person_id;


--
-- Import additional details (URLs and Instant Messaging contacts)
--

UPDATE contacts_organization
SET notes=CONCAT(o.notes, E'\n', url)
FROM contacts_organization o,
dblink(
    'dbname=fineware_feinheit',
    'SELECT array_to_string(array_agg((type, url)), E''\n''), p.id FROM addressbook_url u LEFT JOIN addressbook_person p ON u.person_id=p.id WHERE company=TRUE GROUP BY p.id'
) AS p(url text, person_id int)
WHERE o.id=person_id AND contacts_organization.id=o.id;

UPDATE contacts_person
SET notes=CONCAT(o.notes, E'\n', url)
FROM contacts_person o,
dblink(
    'dbname=fineware_feinheit',
    'SELECT array_to_string(array_agg((type, url)), E''\n''), p.id FROM addressbook_url u LEFT JOIN addressbook_person p ON u.person_id=p.id WHERE company=FALSE GROUP BY p.id'
) AS p(url text, person_id int)
WHERE o.id=person_id AND contacts_person.id=o.id;

UPDATE contacts_organization
SET notes=CONCAT(o.notes, E'\n', url)
FROM contacts_organization o,
dblink(
    'dbname=fineware_feinheit',
    'SELECT array_to_string(array_agg((type, contact)), E''\n''), p.id FROM addressbook_imcontact u LEFT JOIN addressbook_person p ON u.person_id=p.id WHERE company=TRUE GROUP BY p.id'
) AS p(url text, person_id int)
WHERE o.id=person_id AND contacts_organization.id=o.id;

UPDATE contacts_person
SET notes=CONCAT(o.notes, E'\n', url)
FROM contacts_person o,
dblink(
    'dbname=fineware_feinheit',
    'SELECT array_to_string(array_agg((type, contact)), E''\n''), p.id FROM addressbook_imcontact u LEFT JOIN addressbook_person p ON u.person_id=p.id WHERE company=FALSE GROUP BY p.id'
) AS p(url text, person_id int)
WHERE o.id=person_id AND contacts_person.id=o.id;


--
-- Person detail weighting
--

UPDATE contacts_emailaddress SET weight=weight + 30 WHERE type ILIKE '%mobile%';
UPDATE contacts_emailaddress SET weight=weight + 20 WHERE type ILIKE '%work%';
UPDATE contacts_emailaddress SET weight=weight + 10 WHERE type ILIKE '%home%';
UPDATE contacts_emailaddress SET weight=weight - 100 WHERE type ILIKE '%organization%';

UPDATE contacts_phonenumber SET weight=weight + 30 WHERE type ILIKE '%mobile%';
UPDATE contacts_phonenumber SET weight=weight + 20 WHERE type ILIKE '%work%';
UPDATE contacts_phonenumber SET weight=weight + 10 WHERE type ILIKE '%home%';
UPDATE contacts_phonenumber SET weight=weight - 100 WHERE type ILIKE '%organization%';

UPDATE contacts_postaladdress SET weight=weight + 30 WHERE type ILIKE '%mobile%';
UPDATE contacts_postaladdress SET weight=weight + 20 WHERE type ILIKE '%work%';
UPDATE contacts_postaladdress SET weight=weight + 10 WHERE type ILIKE '%home%';
UPDATE contacts_postaladdress SET weight=weight - 100 WHERE type ILIKE '%organization%';


--
-- Import projects (jobs in Metronom lingo)
--

INSERT INTO projects_project
(id, title, description, type, created_at, closed_on, customer_id, contact_id, owned_by_id, _code)
SELECT
id,
title,
description,
CASE
WHEN no_profit THEN 'internal'
WHEN ongoing THEN 'maintenance'
ELSE 'order'
END,
created,
CASE WHEN status=30 THEN now() ELSE NULL END,
customer_id,
contact_id,
owned_by_id,
_code % 10000
FROM
dblink(
    'dbname=fineware_feinheit',
    'SELECT j.id, j.name, j.description, CASE WHEN state=30 THEN 30 ELSE 20 END, j.created, no_profit, ongoing, CASE WHEN p.company=TRUE THEN customer_id ELSE 1 END, CASE WHEN cp.company=FALSE THEN contact.person_id ELSE NULL END, manager_id, replace(job_id, ''-'', '''')::integer FROM jobs_job j LEFT JOIN addressbook_person p ON j.customer_id=p.id LEFT OUTER JOIN addressbook_address contact ON j.contact_id=contact.id LEFT OUTER JOIN addressbook_person cp ON contact.person_id=cp.id'
) AS p(id int, title varchar(100), description text, status int, created timestamp, no_profit bool, ongoing bool, customer_id int, contact_id int, owned_by_id int, _code int);

UPDATE projects_project
SET closed_on=p.created
FROM
dblink(
  'dbname=fineware_feinheit',
  'SELECT DISTINCT ON (job_id) job_id, created FROM jobs_jobupdate WHERE state=30 ORDER BY job_id, created DESC'
) AS p(job_id int, created timestamp)
WHERE projects_project.id=p.job_id AND projects_project.closed_on IS NOT NULL;


--
-- Import invoices
--

INSERT INTO invoices_invoice
(id, title, description, created_at, status, type, postal_address, subtotal, discount, tax_rate, liable_to_vat, total, contact_id, customer_id, owned_by_id, project_id, down_payment_applied_to_id, down_payment_total, due_on, invoiced_on, _code, payment_notice, third_party_costs)
SELECT
    invoices.id,
    invoices.name,
    invoices.description,
    invoices.created,
    CASE
        WHEN state IN (10, 20) THEN state
        WHEN state=25 THEN 30
        WHEN state=30 THEN 40
        WHEN state=35 THEN 50
        WHEN state=40 THEN 60
    END,
    CASE WHEN down_payment THEN 'down-payment' ELSE 'fixed' END,
    CASE WHEN invoices.invoice_full_override!='' THEN invoices.invoice_full_override ELSE
        regexp_replace(regexp_replace(CONCAT(
            invoice_company, E'\n',
            invoice_first_name, ' ', invoice_last_name, E'\n',
            invoice_address, E'\n',
            invoice_zip_code, ' ', invoice_city, E'\n',
            CASE WHEN invoice_country = 'CH' THEN '' ELSE invoice_country END
        ), '^\s+', ''), '\s+$', '')
    END,
    subtotal,
    discount,
    tax,
    tax > 0,
    total,
    p.contact_id,
    p.customer_id,
    manager_id,
    job_id,
    NULL,
    0,
    due_date,
    invoice_date,
    _invoice_id,
    '',
    0
FROM projects_project p, dblink(
    'dbname=fineware_feinheit',
    'SELECT id, name, description, created, state, down_payment, subtotal, discount, tax, total, manager_id, job_id, due_date, invoice_date, invoice_full_override, invoice_company, invoice_first_name, invoice_last_name, invoice_address, invoice_zip_code, invoice_city, invoice_country, _invoice_id FROM invoicing_jobinvoice'
) AS invoices(id int, name text, description text, created timestamp, state int, down_payment bool, subtotal numeric(10,2), discount numeric(10, 2), tax numeric(10,2), total numeric(10,2), manager_id int, job_id int, due_date date, invoice_date date, invoice_full_override text, invoice_company text, invoice_first_name text, invoice_last_name text, invoice_address text, invoice_zip_code text, invoice_city text, invoice_country text, _invoice_id int)
WHERE
    p.id=invoices.job_id;

UPDATE invoices_invoice
SET closed_on=p.closed_on, payment_notice=notes
FROM dblink(
    'dbname=fineware_feinheit',
    'SELECT DISTINCT ON (invoice_id) date, notes, invoice_id FROM invoicing_jobinvoiceupdate WHERE state=30 OR state=35 OR state=40 ORDER BY invoice_id, date DESC, id DESC'
) AS p(closed_on date, notes text, invoice_id int)
WHERE invoices_invoice.id=p.invoice_id;

UPDATE invoices_invoice
SET third_party_costs=p.third_party_costs
FROM
dblink(
  'dbname=fineware_feinheit',
  'SELECT invoice_id, SUM(count*cost) FROM worklog_articleentry WHERE down_payment=FALSE GROUP BY invoice_id'
) AS p(invoice_id int, third_party_costs numeric(10,2))
WHERE invoices_invoice.id=p.invoice_id;


--
-- Import recurring invoices
--

INSERT INTO invoices_recurringinvoice (
  id,
  subtotal,
  discount,
  liable_to_vat,
  tax_rate,
  total,
  third_party_costs,
  title,
  description,
  created_at,
  postal_address,
  starts_on,
  ends_on,
  periodicity,
  next_period_starts_on,
  contact_id,
  customer_id,
  owned_by_id
)
SELECT DISTINCT ON (id)
  id,
  0,
  0,
  TRUE,
  7.7,
  0,
  0,
  name,
  notes,
  created,
  '',
  start_date,
  end_date,
  period,
  NULL,
  contact_id,
  customer_id,
  manager_id
FROM
dblink(
  'dbname=fineware_feinheit',
  'SELECT lease.id, lease.created, lease.name, lease.notes, CASE WHEN customer.company=TRUE THEN customer.id ELSE 1 END, manager_id, start_date, period, end_date, CASE WHEN cap.company=FALSE THEN ca.person_id ELSE NULL END FROM products_productlease lease LEFT JOIN addressbook_person customer ON customer.id=lease.customer_id LEFT OUTER JOIN addressbook_address ca ON lease.contact_id=ca.id LEFT OUTER JOIN addressbook_person cap ON ca.person_id=cap.id WHERE end_date IS NULL'
) AS p(
  id int,
  created timestamp,
  name text,
  notes text,
  customer_id int,
  manager_id int,
  start_date date,
  period text,
  end_date date,
  contact_id int
)
ORDER BY id;

UPDATE invoices_recurringinvoice
SET subtotal=p.subtotal, third_party_costs=p.third_party_costs, description=CONCAT(description, E'\n', p.notes)
FROM
dblink(
  'dbname=fineware_feinheit',
  'SELECT productlease_id, SUM(count * cost), SUM(count * cost * (1 + commission / 100)), string_agg(CONCAT(agroup.name, '' - '', article.name, CASE WHEN pl.notes!='''' THEN '' - '' ELSE '' '' END, pl.notes, '': '', count, '' * CHF '', to_char(cost * (1 + commission / 100), ''FM9999.99'')), ''\n'') FROM products_productleasearticle pl LEFT JOIN articles_article article ON pl.article_id=article.id LEFT JOIN articles_article agroup ON article.parent_id=agroup.id GROUP BY productlease_id'
) AS p(
  id int,
  third_party_costs numeric(10,2),
  subtotal numeric(10,2),
  notes text
)
WHERE invoices_recurringinvoice.id=p.id;

UPDATE invoices_recurringinvoice
SET next_period_starts_on=p.next_period_starts_on
FROM
dblink(
  'dbname=fineware_feinheit',
  'SELECT DISTINCT ON (productlease_id) productlease_id, date FROM products_productleaseentry WHERE pending=FALSE GROUP BY productlease_id, date ORDER BY productlease_id, date DESC'
) AS p(id int, next_period_starts_on date)
WHERE p.id=invoices_recurringinvoice.id;


--
-- Import offers
--

INSERT INTO offers_offer (
	id,
	subtotal,
	discount,
	tax_rate,
	total,
	offered_on,
	title,
	description,
	status,
	postal_address,
	owned_by_id,
	project_id,
	created_at,
	liable_to_vat,
	_code,
	closed_on
)
SELECT
	p.id,
	p.subtotal,
	p.discount,
	p.tax,
  CASE WHEN p.tax > 0 THEN (subtotal - discount) * (1 + p.tax / 100) ELSE p.total END,
	p.offer_date,
	p.name,
	p.description,
	p.state,
  regexp_replace(regexp_replace(CONCAT(
		offer_company, E'\n',
		offer_first_name, ' ', offer_last_name, E'\n',
		offer_address, E'\n',
		offer_zip_code, ' ', offer_city, E'\n',
		CASE WHEN offer_country = 'CH' THEN '' ELSE offer_country END
  ), '^\s+', ''), '\s+$', ''),
	p.manager_id,
	p.job_id,
	p.created,
	p.tax > 0,
	p._offer_id::int,
	p.closed_date

FROM projects_project,
dblink(
	'dbname=fineware_feinheit',
	'SELECT jo.id, jo.created, jo.name, jo.notes, jo.offer_company, jo.offer_last_name, jo.offer_first_name, jo.offer_address, jo.offer_zip_code, jo.offer_city, jo.offer_country, COALESCE(jo.offer_date, po.offer_date, jo.closed_date), jo._offer_id, jo.customer_id, jo.contact_id, jo.job_id, jo.manager_id, jo.description, jo.closed_date, jo.state, jo.subtotal, jo.discount, jo.tax, jo.total FROM offers_joboffer jo LEFT JOIN offers_projectoffer po ON jo.projectoffer_id=po.id'
) AS p(id int, created timestamp, name varchar(100), notes text, offer_company text, offer_last_name text, offer_first_name text, offer_address text, offer_zip_code text, offer_city text, offer_country text, offer_date date, _offer_id text, customer_id int, contact_id int, job_id int, manager_id int, description text, closed_date date, state int, subtotal numeric(10,2), discount numeric(10,2), tax numeric(10,2), total numeric(10,2))
WHERE p.job_id IS NOT NULL AND p.job_id=projects_project.id;


--
-- Import services / stories
--

INSERT INTO projects_service
(id, created_at, title, position, description, project_id, service_hours, service_cost, offer_id, effort_type, effort_hours, effort_rate, cost, third_party_costs)
SELECT
  p.id,
  NOW(),
  p.activity_name,
  p.ordering,
  p.notes,
  p.job_id,
  0.0,
  0.0,
  p.offer_id,
  p.activity_name,
  p.hours,
  p.invoicing_hourly_rate,
  NULL,
  NULL
FROM dblink(
    'dbname=fineware_feinheit',
    'SELECT a.id, CASE WHEN ag.level=1 THEN ag.name ELSE aa.name END, a.notes, jo.job_id, jo.id, a.ordering, a.invoicing_hourly_rate, a.hours FROM offers_offeredactivity a LEFT JOIN offers_joboffer jo ON a.joboffer_id=jo.id LEFT JOIN articles_activity aa ON a.activity_id=aa.id LEFT OUTER JOIN articles_activity ag ON aa.parent_id=ag.id WHERE jo.job_id IS NOT NULL AND a.included'
) AS p(id int, activity_name text, notes text, job_id int, offer_id int, ordering int, invoicing_hourly_rate numeric(10,2), hours numeric(5, 2));

INSERT INTO projects_service
(
  id,
  created_at,
  title,
  position,
  description,
  project_id,
  service_hours,
  service_cost,
  offer_id,
  effort_type,
  effort_hours,
  effort_rate,
  cost,
  third_party_costs
)
SELECT
  p.id + 100000,
  NOW(),
  p.article_name,
  p.ordering,
  p.notes,
  p.job_id,
  0.0,
  0.0,
  p.offer_id,
  '',
  NULL,
  NULL,
  count * cost * (1 + commission / 100),
  count * cost
FROM dblink(
    'dbname=fineware_feinheit',
    'SELECT a.id, CASE WHEN ag.level=1 THEN ag.name ELSE aa.name END, a.notes, jo.job_id, jo.id, a.ordering, cost, commission, count FROM offers_offeredarticle a LEFT JOIN offers_joboffer jo ON a.joboffer_id=jo.id LEFT JOIN articles_article aa ON a.article_id=aa.id LEFT OUTER JOIN articles_article ag ON aa.parent_id=ag.id WHERE jo.job_id IS NOT NULL AND a.included'
) AS p(id int, article_name text, notes text, job_id int, offer_id int, ordering int, cost numeric(10,2), commission numeric(10,2), count int);


--
-- Fix sequences
--

SELECT SETVAL('public.accounts_user_id_seq', COALESCE(MAX(id), 1) ) FROM public.accounts_user;
SELECT SETVAL('public.activities_activity_id_seq', COALESCE(MAX(id), 1) ) FROM public.activities_activity;
SELECT SETVAL('public.audit_logged_actions_event_id_seq', COALESCE(MAX(event_id), 1) ) FROM public.audit_logged_actions;
SELECT SETVAL('public.auth_group_id_seq', COALESCE(MAX(id), 1) ) FROM public.auth_group;
SELECT SETVAL('public.auth_group_permissions_id_seq', COALESCE(MAX(id), 1) ) FROM public.auth_group_permissions;
SELECT SETVAL('public.auth_permission_id_seq', COALESCE(MAX(id), 1) ) FROM public.auth_permission;
SELECT SETVAL('public.contacts_emailaddress_id_seq', COALESCE(MAX(id), 1) ) FROM public.contacts_emailaddress;
SELECT SETVAL('public.contacts_group_id_seq', COALESCE(MAX(id), 1) ) FROM public.contacts_group;
SELECT SETVAL('public.contacts_organization_groups_id_seq', COALESCE(MAX(id), 1) ) FROM public.contacts_organization_groups;
SELECT SETVAL('public.contacts_organization_id_seq', COALESCE(MAX(id), 1) ) FROM public.contacts_organization;
SELECT SETVAL('public.contacts_person_groups_id_seq', COALESCE(MAX(id), 1) ) FROM public.contacts_person_groups;
SELECT SETVAL('public.contacts_person_id_seq', COALESCE(MAX(id), 1) ) FROM public.contacts_person;
SELECT SETVAL('public.contacts_phonenumber_id_seq', COALESCE(MAX(id), 1) ) FROM public.contacts_phonenumber;
SELECT SETVAL('public.contacts_postaladdress_id_seq', COALESCE(MAX(id), 1) ) FROM public.contacts_postaladdress;
SELECT SETVAL('public.deals_deal_id_seq', COALESCE(MAX(id), 1) ) FROM public.deals_deal;
SELECT SETVAL('public.deals_stage_id_seq', COALESCE(MAX(id), 1) ) FROM public.deals_stage;
SELECT SETVAL('public.django_admin_log_id_seq', COALESCE(MAX(id), 1) ) FROM public.django_admin_log;
SELECT SETVAL('public.django_content_type_id_seq', COALESCE(MAX(id), 1) ) FROM public.django_content_type;
SELECT SETVAL('public.django_migrations_id_seq', COALESCE(MAX(id), 1) ) FROM public.django_migrations;
SELECT SETVAL('public.invoices_invoice_id_seq', COALESCE(MAX(id), 1) ) FROM public.invoices_invoice;
SELECT SETVAL('public.invoices_service_id_seq', COALESCE(MAX(id), 1) ) FROM public.invoices_service;
SELECT SETVAL('public.logbook_loggedcost_id_seq', COALESCE(MAX(id), 1) ) FROM public.logbook_loggedcost;
SELECT SETVAL('public.logbook_loggedhours_id_seq', COALESCE(MAX(id), 1) ) FROM public.logbook_loggedhours;
SELECT SETVAL('public.offers_offer_id_seq', COALESCE(MAX(id), 1) ) FROM public.offers_offer;
SELECT SETVAL('public.projects_project_id_seq', COALESCE(MAX(id), 1) ) FROM public.projects_project;
SELECT SETVAL('public.projects_service_id_seq', COALESCE(MAX(id), 1) ) FROM public.projects_service;
SELECT SETVAL('public.services_servicetype_id_seq', COALESCE(MAX(id), 1) ) FROM public.services_servicetype;


--
-- Import annual working time data
--

INSERT INTO awt_year (
  year,
  working_time_per_day,
  january,
  february,
  march,
  april,
  may,
  june,
  july,
  august,
  september,
  october,
  november,
  december
)
SELECT
  year,
  working_time_per_day,
  january,
  february,
  march,
  april,
  may,
  june,
  july,
  august,
  september,
  october,
  november,
  december
FROM
dblink(
  'dbname=fineware_feinheit',
  'SELECT year, working_time_per_day, january, february, march, april, may, june, july, august, september, october, november, december FROM resources_annualworkingtime'
) AS p(
  year int,
  working_time_per_day numeric(4,2),
  january numeric(4,2),
  february numeric(4,2),
  march numeric(4,2),
  april numeric(4,2),
  may numeric(4,2),
  june numeric(4,2),
  july numeric(4,2),
  august numeric(4,2),
  september numeric(4,2),
  october numeric(4,2),
  november numeric(4,2),
  december numeric(4,2)
);

INSERT INTO awt_employment (
  user_id,
  date_from,
  date_until,
  percentage,
  vacation_weeks,
  notes
)
SELECT
  user_id,
  date,
  date '9999-12-31',
  percent,
  CASE WHEN percent > 0 THEN vacation_days * 20 / percent ELSE 0 END,
  notes
FROM
dblink(
  'dbname=fineware_feinheit',
  'SELECT p.user_id, e.date, e.percent, e.vacation_days, e.notes FROM accounts_employment e LEFT JOIN accounts_profile p ON e.profile_id=p.id'
) AS p(
  user_id int,
  date date,
  percent int,
  vacation_days numeric(4,2),
  notes text
);

INSERT INTO awt_absence (
  user_id,
  starts_on,
  days,
  description,
  is_vacation
)
SELECT
  user_id,
  starts_on,
  days,
  CONCAT(reason, ': ', notes),
  reason = 'vacation'
FROM
dblink(
  'dbname=fineware_feinheit',
  'SELECT worker_id, date_from, days, notes, reason FROM resources_absence'
) AS p(
  user_id int,
  starts_on date,
  days numeric(4,2),
  notes text,
  reason varchar(16)
);


--
-- Import worklogs
--

INSERT INTO projects_service
(created_at, title, position, description, project_id, service_hours, service_cost, effort_type, effort_rate)
SELECT DISTINCT ON (p.job_id, activitygroup) NOW(), CONCAT('Logbuch:', activitygroup), 0, '', p.job_id, 0.0, 0.0, activitygroup, rate FROM
dblink(
    'dbname=fineware_feinheit',
    'SELECT created, date, hours, w.notes, created_by_id, worker_id, job_id, aa.name, w.invoicing_hourly_rate FROM worklog_worklogentry w LEFT JOIN articles_activity a ON w.activity_id=a.id LEFT JOIN articles_activity aa ON a.parent_id=aa.id'
) AS p(created timestamp, date date, hours numeric, notes text, created_by_id int, worker_id int, job_id int, activitygroup varchar(200), rate numeric)
ORDER BY p.job_id, activitygroup;

INSERT INTO logbook_loggedhours
(created_at, rendered_on, hours, description, created_by_id, rendered_by_id, service_id, invoice_service_id, archived_at)
SELECT
  created,
  date,
  hours,
  notes,
  created_by_id,
  worker_id,
  s.id,
  NULL,
  CASE WHEN archived THEN NOW() ELSE NULL END
FROM projects_service s,
dblink(
    'dbname=fineware_feinheit',
    'SELECT created, date, hours, w.notes, created_by_id, worker_id, job_id, aa.name, invoice_id, w.archived FROM worklog_worklogentry w LEFT JOIN articles_activity a ON w.activity_id=a.id LEFT JOIN articles_activity aa ON a.parent_id=aa.id'
) AS p(created timestamp, date date, hours numeric, notes text, created_by_id int, worker_id int, job_id int, activitygroup varchar(200), invoice_id int, archived bool)
WHERE s.project_id=p.job_id AND s.title=CONCAT('Logbuch:', activitygroup);

INSERT INTO logbook_loggedcost
(created_at, rendered_on, cost, third_party_costs, description, created_by_id, invoice_service_id, project_id, service_id)
SELECT
  created,
  date,
  count * cost * (1 + commission / 100),
  count * cost,
  notes,
  created_by_id,
  NULL,
  job_id,
  NULL
FROM
dblink(
  'dbname=fineware_feinheit',
  'SELECT created, date, count, cost, commission, notes, created_by_id, invoice_id, job_id FROM worklog_articleentry WHERE down_payment=FALSE'
) AS p(
  created timestamp,
  date date,
  count int,
  cost numeric(10,2),
  commission numeric(10,2),
  notes text,
  created_by_id int,
  invoice_id int,
  job_id int
);

UPDATE projects_service
SET
  service_hours=COALESCE(effort_hours, 0),
  service_cost=COALESCE(cost, 0) + COALESCE(effort_hours, 0) * COALESCE(effort_rate, 0);


--
-- Import scheduled hours
--

INSERT INTO projects_service (
created_at,
title,
position,
description,
project_id,
service_hours,
service_cost,
effort_type,
effort_hours,
effort_rate
)
SELECT
NOW(),
'Eingeplante Stunden',
0,
'',
p.project_id,
p.scheduled_hours,
p.scheduled_hours * COALESCE(p.invoicing_rate_override, 180),
'Eingeplante Stunden',
p.scheduled_hours,
COALESCE(p.invoicing_rate_override, 180)
FROM
dblink(
'dbname=fineware_feinheit',
'SELECT id, scheduled_hours, invoicing_rate_override FROM jobs_job WHERE scheduled_hours IS NOT NULL AND id NOT IN (SELECT job_id FROM offers_joboffer WHERE job_id IS NOT NULL)'
) AS p(project_id int, scheduled_hours numeric(10,1), invoicing_rate_override numeric(5,2));


--
-- Import invoicing rate overrides
--

UPDATE projects_service
SET effort_rate=p.invoicing_rate_override
FROM
dblink(
'dbname=fineware_feinheit',
'SELECT id, invoicing_rate_override FROM jobs_job WHERE invoicing_rate_override IS NOT NULL'
) AS p(project_id int, invoicing_rate_override numeric(5,2))
WHERE effort_rate IS NOT NULL AND projects_service.project_id=p.project_id;


--
--
--
-- fineware_feinheit=# select sorting_field, a.person_id, count(*) from addressbook_address a left join addressbook_person p on a.person_id=p.id where employer_id is not null and active group by sorting_field, a.person_id having count(*)>1 order by sorting_field;
--     sorting_field    | person_id | count
-- ---------------------+-----------+-------
--  Angst Walter        |      1544 |     2
--  Arezina Andrea      |      4310 |     2
--  Brennwald Ivo       |      4640 |     2
--  Bucher Mike         |      2467 |     2
--  Cahn Esther         |      2761 |     2
--  Cerny Caroline      |      2912 |     2
--  Dick Andreas        |      2775 |     2
--  Forster Nicola      |       170 |     2
--  Freimüller Andreas  |      1428 |     2
--  Frei Reto           |      1471 |     2
--  Furrer Rolf         |      2717 |     2
--  Gehri Philipp       |      2460 |     2
--  Grob Andreas        |      4898 |     2
--  Haas Marc           |      1429 |     2
--  Haberstich Peter    |      3858 |     2
--  Handschin Martin    |      2787 |     2
--  Hintermüller Kaspar |      1187 |     2
--  Katz Susa           |      2140 |     2
--  Kleiner Jan         |      3535 |     2
--  Krumes Andreas      |      3259 |     2
--  Krüttli Thomas      |      4321 |     2
--  Menzl Mathias       |      1489 |     2
--  Molina Fabian       |      5144 |     2
--  Morini Diana        |      3073 |     4
--  Moser Gerhard       |      1536 |     2
--  Nick Sascha         |      1605 |     2
--  Oberhänsli Erwin    |      2701 |     2
--  Perez Christian     |      2083 |     2
--  Polzer Katrin       |      2556 |     2
--  Sablonier Yves      |      5267 |     2
--  Schaub Christoph    |      2488 |     2
--  Scheffold Fabian    |      3142 |     2
--  Schmid Patrik       |      2031 |     2
--  Twerenbold Georg    |      3252 |     2
--  Wagner Ruth         |      3462 |     2
--  Widmer Diana        |      3955 |     2
--  Wieczorek Jola      |      3616 |     2
--  Zemp Gaudenz        |      4410 |     2
--  Zumbühl Moritz      |        10 |     2
-- (39 rows)
--
